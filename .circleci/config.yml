version: 2
jobs:
  build:
    docker:
      - image: circleci/ruby:2.5.1
      - image: circleci/postgres:9.5.14

    working_directory: ~/frogogo-api-circleci

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

            bundle exec rspec --format progress \
                            --format RspecJunitFormatter \
                            --out /tmp/test-results/rspec.xml \
                            --format progress \
                            $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  deploy-production:
    working_directory: ~/frogogo-api-circleci
    docker:
      - image: circleci/ruby:2.5.1

    steps:
      - run:
          name: Bundle Install
          command: bundle check || bundle install

      - run:
          name: Deploy to AWS in production
          command: |
            eval `ssh-agent` && ssh-add ~/.ssh/id_rsa* && bundle exec cap production deploy

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy-production:
          requires:
            - build
          filters:
            branches:
              only: master
